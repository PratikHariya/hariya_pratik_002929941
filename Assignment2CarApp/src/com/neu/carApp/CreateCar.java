/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.neu.carApp;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Pratik Hariya
 * 
 * This Class is used to Create a Car profile, Update it and Search the same
 */
public class CreateCar extends javax.swing.JPanel {

    /**
     * Creates new form CreateCar
     */
    
    CarProperties carProperties;
    CarPropertyObjects carPropertyObjects;
    ArrayList<Integer> srNoList;
    HashSet<String> manufacturerList;
    HashMap<String, HashSet<Integer>> manufacturerSrNoMap;
    HashSet<Integer> expMntnCertCarList;
    ArrayList<Integer> availableCars;
    ArrayList<Integer> searchResults;
    
    public CreateCar() {
        initComponents();
    }

    CreateCar(CarProperties carProperties, CarPropertyObjects carPropertyObjects) {

        initComponents();
        this.carProperties = carProperties;
        this.carPropertyObjects = carPropertyObjects;
        this.srNoList = this.carPropertyObjects.getSrNoList();
        this.manufacturerList = this.carPropertyObjects.getManufacturerList();
        this.manufacturerSrNoMap = this.carPropertyObjects.getManufacturerSrNoMap();
        this.expMntnCertCarList = this.carPropertyObjects.getExpMntnCertCarList();
        this.availableCars = this.carPropertyObjects.getAvailableCars();
        this.searchResults = this.carPropertyObjects.getSearchResults();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        lblCarName = new javax.swing.JLabel();
        lblPassengerCar = new javax.swing.JLabel();
        lblAvailability = new javax.swing.JLabel();
        lblManufacturer = new javax.swing.JLabel();
        lblYearOfManufacture = new javax.swing.JLabel();
        lblSeats = new javax.swing.JLabel();
        lblSerialNumber = new javax.swing.JLabel();
        lblModelNumber = new javax.swing.JLabel();
        lblCity = new javax.swing.JLabel();
        txtCarName = new javax.swing.JTextField();
        rbAvailabilityYes = new javax.swing.JRadioButton();
        rbAvailabilityNo = new javax.swing.JRadioButton();
        txtManufacturer = new javax.swing.JTextField();
        txtYeatOfManufacture = new javax.swing.JTextField();
        txtSeats = new javax.swing.JTextField();
        txtSerialNumber = new javax.swing.JTextField();
        txtModelNumber = new javax.swing.JTextField();
        cbCity = new javax.swing.JComboBox<>();
        btnUploadFIle = new javax.swing.JButton();
        btnCreate = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSrNo = new javax.swing.JTable();
        btnShowDetails = new javax.swing.JButton();
        rbPasssengerCarYes = new javax.swing.JCheckBox();
        rbPassengerCarNo = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblManufacturer = new javax.swing.JTable();
        lblTmstmp = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtPnTmstmp = new javax.swing.JTextPane();
        txtYearSearch = new javax.swing.JTextField();
        txtModelSearch = new javax.swing.JTextField();
        btnManufacturerSearch = new javax.swing.JButton();
        txtCitySearch = new javax.swing.JTextField();
        txtMinimumSeats = new javax.swing.JTextField();
        txtMaxSeats = new javax.swing.JTextField();
        btnSearchResults = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblExpMntnCertCars = new javax.swing.JTable();
        btnExpCars = new javax.swing.JButton();
        lblYearSearch = new javax.swing.JLabel();
        lblModelNumberSearch = new javax.swing.JLabel();
        lblCitySearch = new javax.swing.JLabel();
        lblMinimumSeats = new javax.swing.JLabel();
        lblMaximumSeats = new javax.swing.JLabel();
        lblSearchFIeld = new javax.swing.JLabel();
        lblCreateField = new javax.swing.JLabel();
        lblNoOfCarsAvailable = new javax.swing.JLabel();
        txtNoOfCarsAvailable = new javax.swing.JTextField();
        btnAllCars = new javax.swing.JButton();
        btnAvailableCars = new javax.swing.JButton();

        setBackground(new java.awt.Color(50, 50, 50));

        lblCarName.setForeground(new java.awt.Color(240, 240, 240));
        lblCarName.setText("Car Name ");

        lblPassengerCar.setForeground(new java.awt.Color(240, 240, 240));
        lblPassengerCar.setText("Passenger Car");

        lblAvailability.setForeground(new java.awt.Color(240, 240, 240));
        lblAvailability.setText("Availability");

        lblManufacturer.setForeground(new java.awt.Color(240, 240, 240));
        lblManufacturer.setText("Manufacturer");

        lblYearOfManufacture.setForeground(new java.awt.Color(240, 240, 240));
        lblYearOfManufacture.setText("Year of Manufacture");

        lblSeats.setForeground(new java.awt.Color(240, 240, 240));
        lblSeats.setText("Seats");

        lblSerialNumber.setForeground(new java.awt.Color(240, 240, 240));
        lblSerialNumber.setText("Serial Number");

        lblModelNumber.setForeground(new java.awt.Color(240, 240, 240));
        lblModelNumber.setText("Model Number");

        lblCity.setForeground(new java.awt.Color(240, 240, 240));
        lblCity.setText("City");

        txtCarName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCarNameActionPerformed(evt);
            }
        });

        buttonGroup2.add(rbAvailabilityYes);
        rbAvailabilityYes.setText("Yes");

        buttonGroup2.add(rbAvailabilityNo);
        rbAvailabilityNo.setText("No");
        rbAvailabilityNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbAvailabilityNoActionPerformed(evt);
            }
        });

        txtYeatOfManufacture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtYeatOfManufactureActionPerformed(evt);
            }
        });

        cbCity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Boston", "Jersey City", "Hoboken", "New York City" }));
        cbCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCityActionPerformed(evt);
            }
        });

        btnUploadFIle.setText("Upload FIle");

        btnCreate.setText("Create/Update");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        tblSrNo.setAutoCreateRowSorter(true);
        tblSrNo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Serial Number"
            }
        ));
        tblSrNo.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblSrNo);

        btnShowDetails.setText("Display Attributes");
        btnShowDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowDetailsActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbPasssengerCarYes);
        rbPasssengerCarYes.setText("Yes");

        buttonGroup1.add(rbPassengerCarNo);
        rbPassengerCarNo.setText("No");

        tblManufacturer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Manufacturers"
            }
        ));
        jScrollPane2.setViewportView(tblManufacturer);

        lblTmstmp.setForeground(new java.awt.Color(240, 240, 240));
        lblTmstmp.setText("Latest Timestamp");

        jScrollPane3.setViewportView(txtPnTmstmp);

        txtYearSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtYearSearchMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtYearSearchMousePressed(evt);
            }
        });
        txtYearSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtYearSearchActionPerformed(evt);
            }
        });

        txtModelSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtModelSearchMousePressed(evt);
            }
        });
        txtModelSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtModelSearchActionPerformed(evt);
            }
        });

        btnManufacturerSearch.setText("Search Car using Manufacturer");
        btnManufacturerSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManufacturerSearchActionPerformed(evt);
            }
        });

        txtCitySearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtCitySearchMousePressed(evt);
            }
        });
        txtCitySearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCitySearchActionPerformed(evt);
            }
        });

        txtMinimumSeats.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtMinimumSeatsMousePressed(evt);
            }
        });

        txtMaxSeats.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtMaxSeatsMousePressed(evt);
            }
        });

        btnSearchResults.setText("Search");
        btnSearchResults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchResultsActionPerformed(evt);
            }
        });

        tblExpMntnCertCars.setAutoCreateRowSorter(true);
        tblExpMntnCertCars.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Expired Maintainence Certificate cars"
            }
        ));
        jScrollPane4.setViewportView(tblExpMntnCertCars);

        btnExpCars.setText("Display Expired Car Attritubes");
        btnExpCars.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExpCarsActionPerformed(evt);
            }
        });

        lblYearSearch.setForeground(new java.awt.Color(240, 240, 240));
        lblYearSearch.setText("Year Of Manufacture");

        lblModelNumberSearch.setForeground(new java.awt.Color(240, 240, 240));
        lblModelNumberSearch.setText("Model Number");

        lblCitySearch.setForeground(new java.awt.Color(240, 240, 240));
        lblCitySearch.setText("City");

        lblMinimumSeats.setForeground(new java.awt.Color(240, 240, 240));
        lblMinimumSeats.setText("Minimum Seats");

        lblMaximumSeats.setForeground(new java.awt.Color(240, 240, 240));
        lblMaximumSeats.setText("Maximum Seats");

        lblSearchFIeld.setFont(new java.awt.Font("Agency FB", 1, 36)); // NOI18N
        lblSearchFIeld.setForeground(new java.awt.Color(240, 240, 240));
        lblSearchFIeld.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblSearchFIeld.setText("              Search Field");
        lblSearchFIeld.setMaximumSize(new java.awt.Dimension(200, 50));
        lblSearchFIeld.setMinimumSize(new java.awt.Dimension(200, 50));
        lblSearchFIeld.setName(""); // NOI18N
        lblSearchFIeld.setPreferredSize(new java.awt.Dimension(200, 50));

        lblCreateField.setFont(new java.awt.Font("Agency FB", 1, 36)); // NOI18N
        lblCreateField.setForeground(new java.awt.Color(240, 240, 240));
        lblCreateField.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCreateField.setText("         Create Field");

        lblNoOfCarsAvailable.setForeground(new java.awt.Color(200, 200, 200));
        lblNoOfCarsAvailable.setText("Number of cars currently available");

        btnAllCars.setText("All Cars");
        btnAllCars.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAllCarsActionPerformed(evt);
            }
        });

        btnAvailableCars.setText("Available Cars");
        btnAvailableCars.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAvailableCarsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(lblCarName, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtCarName, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(47, 47, 47)
                                        .addComponent(lblSeats, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblModelNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(lblManufacturer, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(txtModelNumber, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                                                    .addComponent(txtManufacturer, javax.swing.GroupLayout.Alignment.TRAILING))))
                                        .addGap(43, 43, 43)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(lblYearOfManufacture, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                                            .addComponent(lblCity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(129, 129, 129)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnExpCars, javax.swing.GroupLayout.DEFAULT_SIZE, 333, Short.MAX_VALUE)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblNoOfCarsAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtNoOfCarsAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(237, 237, 237)
                                .addComponent(lblAvailability, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnAllCars)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnAvailableCars))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(txtSeats, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtYeatOfManufacture, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbCity, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnShowDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(btnManufacturerSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(27, 27, 27)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblSerialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblPassengerCar, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 20, Short.MAX_VALUE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lblCreateField, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(102, 102, 102)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(rbAvailabilityYes, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                            .addComponent(rbPasssengerCarYes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(rbPassengerCarNo, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnUploadFIle, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(rbAvailabilityNo, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblTmstmp)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtYearSearch)
                            .addComponent(lblYearSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                            .addComponent(txtMinimumSeats)
                            .addComponent(lblMinimumSeats, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSearchResults, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtModelSearch, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblModelNumberSearch, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lblCitySearch, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMaxSeats)
                            .addComponent(lblMaximumSeats, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                            .addComponent(txtCitySearch)))
                    .addComponent(txtSerialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(498, 498, 498))
            .addGroup(layout.createSequentialGroup()
                .addGap(368, 368, 368)
                .addComponent(lblSearchFIeld, javax.swing.GroupLayout.PREFERRED_SIZE, 425, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(124, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblTmstmp, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(lblCreateField)))
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCarName)
                    .addComponent(txtCarName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSeats)
                    .addComponent(txtSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAvailability)
                    .addComponent(rbAvailabilityNo)
                    .addComponent(rbAvailabilityYes)
                    .addComponent(btnCreate, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblManufacturer)
                            .addComponent(txtManufacturer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblYearOfManufacture)
                            .addComponent(txtYeatOfManufacture, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSerialNumber)
                            .addComponent(txtSerialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblModelNumber)
                                .addComponent(txtModelNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblCity)
                                .addComponent(cbCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(rbPasssengerCarYes)
                                .addComponent(rbPassengerCarNo))
                            .addComponent(lblPassengerCar)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(btnUploadFIle, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(38, 38, 38)
                .addComponent(lblSearchFIeld, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNoOfCarsAvailable)
                    .addComponent(txtNoOfCarsAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAllCars)
                    .addComponent(btnAvailableCars))
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnExpCars)
                            .addComponent(btnShowDetails)
                            .addComponent(btnManufacturerSearch))
                        .addGap(37, 37, 37))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblYearSearch)
                            .addComponent(lblModelNumberSearch)
                            .addComponent(lblCitySearch))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtYearSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtModelSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCitySearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblMaximumSeats)
                                    .addComponent(lblMinimumSeats))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtMinimumSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtMaxSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(btnSearchResults, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(95, Short.MAX_VALUE))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtCarNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCarNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCarNameActionPerformed

    private void txtYeatOfManufactureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtYeatOfManufactureActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtYeatOfManufactureActionPerformed

    private void cbCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbCityActionPerformed

//    This method is used to create and update the car profile. It also validates the input properties of the car profile.
    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:
        
        
        
        int initialSize, finalSize;       
        CarProperties carProperties = new CarProperties();
        
        initialSize = carPropertyObjects.getCarMap().size();
        
        if(txtCarName.getText().equalsIgnoreCase("")) {
            JOptionPane.showMessageDialog(this, "Enter Car Name");
            return;
        }
        else {
            carProperties.setCarName(txtCarName.getText());
        }
        
        
        if(rbPasssengerCarYes.isSelected())
            carProperties.setPassengerCar(true);
        else if(rbPassengerCarNo.isSelected())
            carProperties.setPassengerCar(false);
        else {
            JOptionPane.showMessageDialog(this, "Please Select Passenger Car Radio Button");
            return;
        }
        
        if(rbAvailabilityYes.isSelected())
            carProperties.setAvailability(true);
        else if(rbAvailabilityNo.isSelected())
            carProperties.setAvailability(false);
        else {
            JOptionPane.showMessageDialog(this, "Please Select Availability Radio Button");
            return;
        }        

        if(txtManufacturer.getText().equalsIgnoreCase("")) {
            JOptionPane.showMessageDialog(this, "Please Enter Manufacturer");
            return;
        }
        else {        
            carProperties.setManufacturer(txtManufacturer.getText());
        }
        
        if(txtYeatOfManufacture.getText().equalsIgnoreCase("")) {
            JOptionPane.showMessageDialog(this, "Please Enter Year of Manufacturer");
            return;            
        }
        else {
            try {
                if(Integer.parseInt(txtYeatOfManufacture.getText()) <= 1900 || Integer.parseInt(txtYeatOfManufacture.getText()) >= 2021) {
                    JOptionPane.showMessageDialog(this, "Year of Manufacture should be between 1900 and 2021");
                    return;
                }
                else {
                    carProperties.setYearOfManufacture(Integer.parseInt(txtYeatOfManufacture.getText()));
                }
            }
            catch(NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Year of Manufacture should be numeric");
                return;
            }  
            catch(Exception e) {
                JOptionPane.showMessageDialog(this, "Invalid Input");
                return;
            }            
        }
        
        if(txtSeats.getText().equalsIgnoreCase("")) {
            JOptionPane.showMessageDialog(this, "Please Enter Seats");
            return;            
        }
        else {
            try {
                if(Integer.parseInt(txtSeats.getText()) <= 2 || Integer.parseInt(txtSeats.getText()) >= 10) {
                    JOptionPane.showMessageDialog(this, "Seats should be between 2 and 10");
                    return;
                }
                else {
                    carProperties.setSeats(Integer.parseInt(txtSeats.getText()));
                }
            }
            catch(NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Seats should be numeric");
                return;
            }  
            catch(Exception e) {
                JOptionPane.showMessageDialog(this, "Invalid Input");
                return;
            }
        }
        
        if(txtSerialNumber.getText().equalsIgnoreCase("")) {
            JOptionPane.showMessageDialog(this, "Please Enter Serial Nunmber");
            return;            
        }
        else {
            try {
                if(txtSeats.getText().length() >=10) {
                    JOptionPane.showMessageDialog(this, "Length of Serial Number should be less than 10");
                    return;
                }
                else {
                    carProperties.setSerialNumber(Integer.parseInt(txtSerialNumber.getText()));
                }
            }
            catch(NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Seats should be numeric");
                return;
            }  
            catch(Exception e) {
                JOptionPane.showMessageDialog(this, "Invalid Input");
                return;
            }
        } 
        
        if(txtModelNumber.getText().equalsIgnoreCase("")) {
            JOptionPane.showMessageDialog(this, "Please Enter Model Nunmber");
            return;            
        }
        else {
            try {
                if(txtSeats.getText().length() >=10) {
                    JOptionPane.showMessageDialog(this, "Length of Model Number should be less than 10");
                    return;
                }
                else {
                    carProperties.setModelNumber(Integer.parseInt(txtModelNumber.getText()));
                }
            }
            catch(NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Model Number should be numeric");
                return;
            }  
            catch(Exception e) {
                JOptionPane.showMessageDialog(this, "Invalid Input");
                return;
            }
        }         
        
        carProperties.setCity(cbCity.getSelectedItem().toString());
        

        
        carProperties.setCity(cbCity.getSelectedItem().toString());
        HashMap<Integer, CarProperties> tempMap = new HashMap<Integer, CarProperties>();
        tempMap = carPropertyObjects.getCarMap();
        tempMap.put(carProperties.getSerialNumber(), carProperties);
        carPropertyObjects.setCarMap(tempMap);
        
        HashMap<String, HashSet<Integer>> tempManufacturerSrNoMap = new HashMap<String, HashSet<Integer>>();
        HashSet<Integer> tempHashSet = new HashSet<Integer>();
        
        tempManufacturerSrNoMap = carPropertyObjects.getManufacturerSrNoMap();
        tempHashSet = tempManufacturerSrNoMap.get(carProperties.getManufacturer());
        
        if(tempHashSet != null) {
            tempHashSet.add(carProperties.getSerialNumber());
        }
        else {
            tempHashSet = new HashSet<Integer>();
            tempHashSet.add(carProperties.getSerialNumber());
        }
        
        tempManufacturerSrNoMap.put(carProperties.getManufacturer(), tempHashSet);
        carPropertyObjects.setManufacturerSrNoMap(tempManufacturerSrNoMap);
        
        finalSize = carPropertyObjects.getCarMap().size();
        
        if(initialSize != finalSize) {
            srNoList.add(carProperties.getSerialNumber());
            JOptionPane.showMessageDialog(this, "Record Created");
            
            if(carProperties.isAvailability()) {
                availableCars.add(carProperties.getSerialNumber());
            }
        }
        else {
            srNoList.remove(new Integer(carProperties.getSerialNumber()));
            srNoList.add(carProperties.getSerialNumber());
            
            if(2021-carProperties.getYearOfManufacture() < 10) {
                expMntnCertCarList.remove(carProperties.getSerialNumber());
            }
            
            availableCars.remove(new Integer(carProperties.getSerialNumber()));
                        
            
            if(carProperties.isAvailability()) {
                availableCars.add(carProperties.getSerialNumber());
            }
                    
            JOptionPane.showMessageDialog(this, "Record Updated");
        }
        
        txtNoOfCarsAvailable.setText(String.valueOf(availableCars.size()));
        
        System.out.println(carProperties.getYearOfManufacture()-2021);
        if(2021-carProperties.getYearOfManufacture() > 10) {
            expMntnCertCarList.add(carProperties.getSerialNumber());
        }
        
        manufacturerList.add(carProperties.getManufacturer());
        
        SimpleDateFormat date = new SimpleDateFormat("yyyy.MM.dd.HH:mm:ss");
        String timeStamp = date.format(new Date());
        txtPnTmstmp.setText(timeStamp);
        
        DefaultTableModel model1= (DefaultTableModel) tblSrNo.getModel();
        model1.setRowCount(0);
        for(Integer srNo : srNoList){
            Object[] row = new Object[1];
            row[0]=srNo;
            model1.addRow(row);
        }
        
        DefaultTableModel expModel1= (DefaultTableModel) tblExpMntnCertCars.getModel();
        expModel1.setRowCount(0);
        
        Iterator<Integer> ii = expMntnCertCarList.iterator();
        
        while(ii.hasNext()) {
            Object[] row = new Object[1];
            row[0]=ii.next();
            expModel1.addRow(row);
        }       
        
        DefaultTableModel manufacturerModel= (DefaultTableModel) tblManufacturer.getModel();
        manufacturerModel.setRowCount(0);
        
        Iterator<String> i = manufacturerList.iterator();
        
        while(i.hasNext()) {
            Object[] row = new Object[1];
            row[0]=i.next();
            manufacturerModel.addRow(row);
        }
        
    }//GEN-LAST:event_btnCreateActionPerformed

//    This method is used to show the details of a car profile using serial number
    private void btnShowDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowDetailsActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model= (DefaultTableModel) tblSrNo.getModel();
        int selectedRowIndex = tblSrNo.getSelectedRow();
        int selectedColumnIndex = tblSrNo.getSelectedColumn();
        
        int srNo = Integer.parseInt(model.getValueAt(selectedRowIndex, selectedColumnIndex).toString());
        
        System.out.println(srNo);
        
        CarProperties carProperties = carPropertyObjects.getCarMap().get(srNo);
        
        txtCarName.setText(carProperties.getCarName());
        
        if(carProperties.isPassengerCar() == true)
            rbPasssengerCarYes.setSelected(true);
        else if(carProperties.isPassengerCar() == false)
            rbPassengerCarNo.setSelected(true);
        
        if(carProperties.isAvailability()== true)
            rbAvailabilityYes.setSelected(true);
        else if(carProperties.isAvailability()== false)
            rbAvailabilityNo.setSelected(true);
        
        txtManufacturer.setText(carProperties.getManufacturer());
        txtYeatOfManufacture.setText(String.valueOf(carProperties.getYearOfManufacture()));
        txtSeats.setText(String.valueOf(carProperties.getSeats()));
        txtSerialNumber.setText(String.valueOf(carProperties.getSerialNumber()));
        txtModelNumber.setText(String.valueOf(carProperties.getModelNumber()));
        cbCity.setSelectedItem(carProperties.getCity());
        
    }//GEN-LAST:event_btnShowDetailsActionPerformed

    private void rbAvailabilityNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbAvailabilityNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbAvailabilityNoActionPerformed

    private void txtYearSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtYearSearchActionPerformed
        // TODO add your handling code here:
        
        
    }//GEN-LAST:event_txtYearSearchActionPerformed

//    This method is used to show the Serial Number associated to a particular Manufacturer
    private void btnManufacturerSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManufacturerSearchActionPerformed
        // TODO add your handling code here:

        DefaultTableModel model= (DefaultTableModel) tblManufacturer.getModel();
        DefaultTableModel model1= (DefaultTableModel) tblSrNo.getModel();
        model1.setRowCount(0);
        
        int selectedRowIndex = tblManufacturer.getSelectedRow();
        int selectedColumnIndex = tblManufacturer.getSelectedColumn();

        String manufacturer = String.valueOf(model.getValueAt(selectedRowIndex, selectedColumnIndex));

        HashSet<Integer> tempSet = carPropertyObjects.getManufacturerSrNoMap().get(manufacturer);

        Iterator<Integer> i = tempSet.iterator();

        while(i.hasNext()) {
            Object[] row = new Object[1];
            row[0]=i.next();
            model1.addRow(row);
        }
    }//GEN-LAST:event_btnManufacturerSearchActionPerformed

    private void txtModelSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtModelSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtModelSearchActionPerformed

//    This method is used to show the Serial Number of car profile having expired Cars
    private void btnExpCarsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExpCarsActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model= (DefaultTableModel) tblExpMntnCertCars.getModel();
        int selectedRowIndex = tblExpMntnCertCars.getSelectedRow();
        int selectedColumnIndex = tblExpMntnCertCars.getSelectedColumn();
        
        int srNo = Integer.parseInt(model.getValueAt(selectedRowIndex, selectedColumnIndex).toString());
        
        System.out.println(srNo);
        
        CarProperties carProperties = carPropertyObjects.getCarMap().get(srNo);
        
        txtCarName.setText(carProperties.getCarName());
        
        if(carProperties.isPassengerCar() == true)
            rbPasssengerCarYes.setSelected(true);
        else if(carProperties.isPassengerCar() == false)
            rbPassengerCarNo.setSelected(true);
        
        if(carProperties.isAvailability()== true)
            rbAvailabilityYes.setSelected(true);
        else if(carProperties.isAvailability()== false)
            rbAvailabilityNo.setSelected(true);
        
        txtManufacturer.setText(carProperties.getManufacturer());
        txtYeatOfManufacture.setText(String.valueOf(carProperties.getYearOfManufacture()));
        txtSeats.setText(String.valueOf(carProperties.getSeats()));
        txtSerialNumber.setText(String.valueOf(carProperties.getSerialNumber()));
        txtModelNumber.setText(String.valueOf(carProperties.getModelNumber()));
        cbCity.setSelectedItem(carProperties.getCity());
    }//GEN-LAST:event_btnExpCarsActionPerformed

    private boolean checkYear(CarProperties car) {
        
        if(txtYearSearch.getText().equals("")) {
            return true;
        }
        else {            
            if(car.getYearOfManufacture() == Integer.parseInt(txtYearSearch.getText())) {
                return true;
            }
            else {
                return false;
            }            
        }
    }   
    
    private boolean checkModel(CarProperties car) {
        
        if(txtModelSearch.getText().equals("")) {
            return true;
        }
        else {            
            if(car.getModelNumber() == Integer.parseInt(txtModelSearch.getText())) {
                return true;
            }
            else {
                return false;
            }            
        }
    }  
    
    private boolean checkCity(CarProperties car) {
        
        if(txtCitySearch.getText().equals("")) {
            return true;
        }
        else {            
            if(car.getCity().equalsIgnoreCase(txtCitySearch.getText())) {
                return true;
            }
            else {
                return false;
            }            
        }
    }  
    
    private boolean checkMinimumSeats(CarProperties car) {
        
        if(txtMinimumSeats.getText().equals("") && txtMaxSeats.getText().equals("")) {
            return true;
        }
        else if(txtMinimumSeats.getText().equals("") || txtMaxSeats.getText().equals("")) {
            
            if(txtMinimumSeats.getText().equals("")) {
                if(car.getSeats() <= Integer.parseInt(txtMaxSeats.getText())) {
                    return true;
                }
            }
            else {
                if(car.getSeats() >= Integer.parseInt(txtMinimumSeats.getText())) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        else {
            if(car.getSeats() <= Integer.parseInt(txtMaxSeats.getText()) && car.getSeats() >= Integer.parseInt(txtMinimumSeats.getText()) ) {
                return true;
            }
            else {
                return false;
            }
        } 
        return false;
    }     
    
    
    private void btnSearchResultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchResultsActionPerformed
        // TODO add your handling code here:
        
        CarProperties car = new CarProperties();
        ArrayList<Integer> searchResults = new ArrayList<Integer>();
        
        boolean isNum = false;
        if(txtYearSearch.getText().equals("")) {
            isNum = txtYearSearch.getText().matches("[0-9]+[\\.]?[0-9]*");
        }
        
        if(!isNum) {
            JOptionPane.showMessageDialog(this, "Year of Manufacture should be numeric");
            return;
        }
        
        boolean isModelNum = false;
        if(txtModelSearch.getText().equals("")) {
            isModelNum = txtModelSearch.getText().matches("[0-9]+[\\.]?[0-9]*");
        }
        
        if(!isModelNum) {
            JOptionPane.showMessageDialog(this, "Model Number should be numeric");
            return;
        }        
        
        boolean isMinNum = false;
        if(txtMinimumSeats.getText().equals("")) {
            isMinNum = txtMinimumSeats.getText().matches("[0-9]+[\\.]?[0-9]*");
        }
        
        if(!isMinNum) {
            JOptionPane.showMessageDialog(this, "Minimum Seats should be numeric");
            return;
        }  
        
        boolean isMaxNum = false;
        if(txtMaxSeats.getText().equals("")) {
            isMaxNum = txtMaxSeats.getText().matches("[0-9]+[\\.]?[0-9]*");
        }
        
        if(!isMinNum) {
            JOptionPane.showMessageDialog(this, "Maximum Seats should be numeric");
            return;
        }        
        
        for(Integer key : carPropertyObjects.getCarMap().keySet()) {
            
            car = carPropertyObjects.getCarMap().get(key);
            if(checkYear(car) && checkModel(car) && checkCity(car) && checkMinimumSeats(car)) {
                searchResults.add(car.getSerialNumber());
            }            
        }

        DefaultTableModel model1= (DefaultTableModel) tblSrNo.getModel();
        model1.setRowCount(0);
        
        for(Integer srNo : searchResults){
            Object[] row = new Object[1];
            row[0]=srNo;
            model1.addRow(row);        
        }
        
    }//GEN-LAST:event_btnSearchResultsActionPerformed

    private void txtYearSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtYearSearchMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtYearSearchMouseClicked

    private void txtYearSearchMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtYearSearchMousePressed
        // TODO add your handling code here:
        
        boolean clicked = false;
        if(!clicked){
            clicked=true;
            txtYearSearch.setText("");
        }
     
        
    }//GEN-LAST:event_txtYearSearchMousePressed

    private void txtModelSearchMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtModelSearchMousePressed
        // TODO add your handling code here:
                boolean clicked = false;
        if(!clicked){
            clicked=true;
            txtModelSearch.setText("");
        }
    }//GEN-LAST:event_txtModelSearchMousePressed

    private void txtCitySearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCitySearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCitySearchActionPerformed

    private void txtCitySearchMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtCitySearchMousePressed
        // TODO add your handling code here:
        boolean clicked = false;
        if(!clicked){
            clicked=true;
            txtCitySearch.setText("");
        }        
    }//GEN-LAST:event_txtCitySearchMousePressed

    private void txtMinimumSeatsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtMinimumSeatsMousePressed
        // TODO add your handling code here:
        boolean clicked = false;
        if(!clicked){
            clicked=true;
            txtMinimumSeats.setText("");
        }        
    }//GEN-LAST:event_txtMinimumSeatsMousePressed

    private void txtMaxSeatsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtMaxSeatsMousePressed
            // TODO add your handling code here:
        boolean clicked = false;
        if(!clicked){
            clicked=true;
            txtMaxSeats.setText("");
        }        
    }//GEN-LAST:event_txtMaxSeatsMousePressed

    private void btnAllCarsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAllCarsActionPerformed
        // TODO add your handling code here:
        
        DefaultTableModel model1= (DefaultTableModel) tblSrNo.getModel();
        model1.setRowCount(0);
        
        for(Integer srNo : srNoList){
            Object[] row = new Object[1];
            row[0]=srNo;
            model1.addRow(row);
        }       
        
        
    }//GEN-LAST:event_btnAllCarsActionPerformed

    private void btnAvailableCarsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAvailableCarsActionPerformed
        // TODO add your handling code here:
        
        DefaultTableModel model1= (DefaultTableModel) tblSrNo.getModel();
        model1.setRowCount(0);
        
        for(Integer srNo : availableCars){
            Object[] row = new Object[1];
            row[0]=srNo;
            model1.addRow(row);
        }        
    }//GEN-LAST:event_btnAvailableCarsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAllCars;
    private javax.swing.JButton btnAvailableCars;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnExpCars;
    private javax.swing.JButton btnManufacturerSearch;
    private javax.swing.JButton btnSearchResults;
    private javax.swing.JButton btnShowDetails;
    private javax.swing.JButton btnUploadFIle;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JComboBox<String> cbCity;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblAvailability;
    private javax.swing.JLabel lblCarName;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblCitySearch;
    private javax.swing.JLabel lblCreateField;
    private javax.swing.JLabel lblManufacturer;
    private javax.swing.JLabel lblMaximumSeats;
    private javax.swing.JLabel lblMinimumSeats;
    private javax.swing.JLabel lblModelNumber;
    private javax.swing.JLabel lblModelNumberSearch;
    private javax.swing.JLabel lblNoOfCarsAvailable;
    private javax.swing.JLabel lblPassengerCar;
    private javax.swing.JLabel lblSearchFIeld;
    private javax.swing.JLabel lblSeats;
    private javax.swing.JLabel lblSerialNumber;
    private javax.swing.JLabel lblTmstmp;
    private javax.swing.JLabel lblYearOfManufacture;
    private javax.swing.JLabel lblYearSearch;
    private javax.swing.JRadioButton rbAvailabilityNo;
    private javax.swing.JRadioButton rbAvailabilityYes;
    private javax.swing.JCheckBox rbPassengerCarNo;
    private javax.swing.JCheckBox rbPasssengerCarYes;
    private javax.swing.JTable tblExpMntnCertCars;
    private javax.swing.JTable tblManufacturer;
    private javax.swing.JTable tblSrNo;
    private javax.swing.JTextField txtCarName;
    private javax.swing.JTextField txtCitySearch;
    private javax.swing.JTextField txtManufacturer;
    private javax.swing.JTextField txtMaxSeats;
    private javax.swing.JTextField txtMinimumSeats;
    private javax.swing.JTextField txtModelNumber;
    private javax.swing.JTextField txtModelSearch;
    private javax.swing.JTextField txtNoOfCarsAvailable;
    private javax.swing.JTextPane txtPnTmstmp;
    private javax.swing.JTextField txtSeats;
    private javax.swing.JTextField txtSerialNumber;
    private javax.swing.JTextField txtYearSearch;
    private javax.swing.JTextField txtYeatOfManufacture;
    // End of variables declaration//GEN-END:variables


}
